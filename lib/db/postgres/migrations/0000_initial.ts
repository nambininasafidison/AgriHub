import { sql } from "drizzle-orm"
import { serial, varchar, text, timestamp, boolean, json, jsonb, decimal, integer } from "drizzle-orm/pg-core"

export async function up(db) {
  // Create users table
  await db.schema
    .createTable("users")
    .addColumn("id", serial("id").primaryKey())
    .addColumn("uuid", varchar("uuid", { length: 36 }).notNull().unique())
    .addColumn("name", varchar("name", { length: 255 }).notNull())
    .addColumn("email", varchar("email", { length: 255 }).notNull().unique())
    .addColumn("password_hash", text("password_hash").notNull())
    .addColumn("role", varchar("role", { length: 50 }).notNull().default("buyer"))
    .addColumn("region", varchar("region", { length: 100 }))
    .addColumn("specialty", varchar("specialty", { length: 100 }))
    .addColumn("phone", varchar("phone", { length: 20 }))
    .addColumn("avatar", text("avatar"))
    .addColumn("is_verified", boolean("is_verified").notNull().default(false))
    .addColumn("preferences", json("preferences"))
    .addColumn("created_at", timestamp("created_at").notNull().defaultNow())
    .addColumn("updated_at", timestamp("updated_at").notNull().defaultNow())
    .execute()

  // Create addresses table
  await db.schema
    .createTable("addresses")
    .addColumn("id", serial("id").primaryKey())
    .addColumn("uuid", varchar("uuid", { length: 36 }).notNull().unique())
    .addColumn("user_id", varchar("user_id", { length: 36 }).notNull())
    .addColumn("name", varchar("name", { length: 255 }).notNull())
    .addColumn("phone", varchar("phone", { length: 20 }).notNull())
    .addColumn("address", text("address").notNull())
    .addColumn("city", varchar("city", { length: 100 }).notNull())
    .addColumn("region", varchar("region", { length: 100 }).notNull())
    .addColumn("postal_code", varchar("postal_code", { length: 20 }))
    .addColumn("country", varchar("country", { length: 100 }).notNull())
    .addColumn("is_default", boolean("is_default").notNull().default(false))
    .addColumn("type", varchar("type", { length: 20 }).notNull().default("both"))
    .execute()

  // Create products table
  await db.schema
    .createTable("products")
    .addColumn("id", serial("id").primaryKey())
    .addColumn("uuid", varchar("uuid", { length: 36 }).notNull().unique())
    .addColumn("name", varchar("name", { length: 255 }).notNull())
    .addColumn("description", text("description").notNull())
    .addColumn("price", decimal("price", { precision: 10, scale: 2 }).notNull())
    .addColumn("sale_price", decimal("sale_price", { precision: 10, scale: 2 }))
    .addColumn("category", varchar("category", { length: 100 }).notNull())
    .addColumn("subcategory", varchar("subcategory", { length: 100 }))
    .addColumn("region", varchar("region", { length: 100 }).notNull())
    .addColumn("seller", varchar("seller", { length: 255 }).notNull())
    .addColumn("seller_id", varchar("seller_id", { length: 36 }).notNull())
    .addColumn("stock", integer("stock").notNull().default(0))
    .addColumn("rating", decimal("rating", { precision: 3, scale: 1 }).notNull().default("0"))
    .addColumn("review_count", integer("review_count").notNull().default(0))
    .addColumn("image", text("image").notNull())
    .addColumn("images", json("images"))
    .addColumn("varieties", json("varieties"))
    .addColumn("attributes", jsonb("attributes"))
    .addColumn("weight", decimal("weight", { precision: 10, scale: 3 }).notNull())
    .addColumn("dimensions", jsonb("dimensions"))
    .addColumn("sku", varchar("sku", { length: 100 }))
    .addColumn("barcode", varchar("barcode", { length: 100 }))
    .addColumn("is_active", boolean("is_active").notNull().default(true))
    .addColumn("is_featured", boolean("is_featured").default(false))
    .addColumn("is_new", boolean("is_new").default(false))
    .addColumn("on_sale", boolean("on_sale").default(false))
    .addColumn("tags", json("tags"))
    .addColumn("created_at", timestamp("created_at").notNull().defaultNow())
    .addColumn("updated_at", timestamp("updated_at").notNull().defaultNow())
    .execute()

  // Create orders table
  await db.schema
    .createTable("orders")
    .addColumn("id", serial("id").primaryKey())
    .addColumn("uuid", varchar("uuid", { length: 36 }).notNull().unique())
    .addColumn("order_number", varchar("order_number", { length: 50 }).notNull().unique())
    .addColumn("user_id", varchar("user_id", { length: 36 }).notNull())
    .addColumn("customer", varchar("customer", { length: 255 }).notNull())
    .addColumn("subtotal", decimal("subtotal", { precision: 10, scale: 2 }).notNull())
    .addColumn("shipping_cost", decimal("shipping_cost", { precision: 10, scale: 2 }).notNull())
    .addColumn("tax_amount", decimal("tax_amount", { precision: 10, scale: 2 }).notNull())
    .addColumn("discount_amount", decimal("discount_amount", { precision: 10, scale: 2 }).notNull().default("0"))
    .addColumn("total", decimal("total", { precision: 10, scale: 2 }).notNull())
    .addColumn("status", varchar("status", { length: 50 }).notNull().default("pending"))
    .addColumn("payment_status", varchar("payment_status", { length: 50 }).notNull().default("pending"))
    .addColumn("payment_method", varchar("payment_method", { length: 100 }).notNull())
    .addColumn("shipping_address", text("shipping_address").notNull())
    .addColumn("tracking_number", varchar("tracking_number", { length: 100 }))
    .addColumn("carrier", varchar("carrier", { length: 100 }))
    .addColumn("applied_promotions", jsonb("applied_promotions"))
    .addColumn("currency", varchar("currency", { length: 10 }).notNull().default("MGA"))
    .addColumn("notes", text("notes"))
    .addColumn("created_at", timestamp("created_at").notNull().defaultNow())
    .addColumn("updated_at", timestamp("updated_at").notNull().defaultNow())
    .execute()

  // Create order_items table
  await db.schema
    .createTable("order_items")
    .addColumn("id", serial("id").primaryKey())
    .addColumn("order_id", integer("order_id").notNull().references("orders.id"))
    .addColumn("product_id", integer("product_id").notNull().references("products.id"))
    .addColumn("product_uuid", varchar("product_uuid", { length: 36 }).notNull())
    .addColumn("name", varchar("name", { length: 255 }).notNull())
    .addColumn("price", decimal("price", { precision: 10, scale: 2 }).notNull())
    .addColumn("quantity", integer("quantity").notNull())
    .addColumn("image", text("image").notNull())
    .addColumn("variety", varchar("variety", { length: 100 }))
    .addColumn("variation_id", varchar("variation_id", { length: 36 }))
    .addColumn("variation_name", varchar("variation_name", { length: 100 }))
    .addColumn("weight", decimal("weight", { precision: 10, scale: 3 }).notNull())
    .addColumn("subtotal", decimal("subtotal", { precision: 10, scale: 2 }).notNull())
    .execute()

  // Create promotions table
  await db.schema
    .createTable("promotions")
    .addColumn("id", serial("id").primaryKey())
    .addColumn("uuid", varchar("uuid", { length: 36 }).notNull().unique())
    .addColumn("name", varchar("name", { length: 255 }).notNull())
    .addColumn("description", text("description").notNull())
    .addColumn("type", varchar("type", { length: 50 }).notNull())
    .addColumn("value", decimal("value", { precision: 10, scale: 2 }).notNull())
    .addColumn("code", varchar("code", { length: 50 }).unique())
    .addColumn("minimum_order_amount", decimal("minimum_order_amount", { precision: 10, scale: 2 }))
    .addColumn("maximum_discount", decimal("maximum_discount", { precision: 10, scale: 2 }))
    .addColumn("start_date", timestamp("start_date").notNull())
    .addColumn("end_date", timestamp("end_date").notNull())
    .addColumn("usage_limit", integer("usage_limit"))
    .addColumn("usage_count", integer("usage_count").notNull().default(0))
    .addColumn("is_active", boolean("is_active").notNull().default(true))
    .addColumn("applicable_categories", json("applicable_categories"))
    .addColumn("applicable_products", json("applicable_products"))
    .addColumn("excluded_categories", json("excluded_categories"))
    .addColumn("excluded_products", json("excluded_products"))
    .addColumn("created_at", timestamp("created_at").notNull().defaultNow())
    .addColumn("updated_at", timestamp("updated_at").notNull().defaultNow())
    .execute()

  // Create indexes
  await db.execute(sql`CREATE INDEX idx_products_category ON products (category)`)
  await db.execute(sql`CREATE INDEX idx_products_seller_id ON products (seller_id)`)
  await db.execute(sql`CREATE INDEX idx_orders_user_id ON orders (user_id)`)
  await db.execute(sql`CREATE INDEX idx_orders_status ON orders (status)`)
  await db.execute(sql`CREATE INDEX idx_addresses_user_id ON addresses (user_id)`)
  await db.execute(sql`CREATE INDEX idx_promotions_code ON promotions (code)`)
  await db.execute(sql`CREATE INDEX idx_promotions_is_active ON promotions (is_active)`)
}

export async function down(db) {
  await db.schema.dropTable("order_items")
  await db.schema.dropTable("orders")
  await db.schema.dropTable("promotions")
  await db.schema.dropTable("products")
  await db.schema.dropTable("addresses")
  await db.schema.dropTable("users")
}
